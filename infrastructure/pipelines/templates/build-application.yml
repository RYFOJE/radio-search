parameters:
  - name: projectDirectory
    type: string
  - name: projectFile
    type: string
  - name: dotnetVersion
    type: string
    default: '8.x'
  - name: hasTests
    type: boolean
    default: true
  - name: buildConfiguration
    type: string
    default: 'Release'


jobs:
  - job: Build
    displayName: "Build"
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET SDK'
        inputs:
          version: ${{ parameters.dotnetVersion }}

      - task: NuGetAuthenticate@1

      - task: DotNetCoreCLI@2
        displayName: 'Restore all projects'
        inputs:
          command: 'restore'
          projects: '${{ parameters.projectDirectory }}/**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build all tests'
        condition: eq('${{ parameters.hasTests }}', 'true')
        inputs:
          command: 'build'
          projects: '${{ parameters.projectDirectory }}/Tests/**/*Tests.csproj'
          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/test --no-restore'

      - task: DotNetCoreCLI@2
        displayName: 'Build project'
        inputs:
          command: 'build'
          projects: '${{ parameters.projectFile }}'
          arguments: '--configuration ${{ parameters.buildConfiguration }}'

      # FOR TESTS
      - task: DotNetCoreCLI@2
        displayName: 'Build project for tests'
        condition: eq('${{ parameters.hasTests }}', 'true')
        inputs:
          command: 'build'
          projects: ${{ parameters.projectFile }}
          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/lib'

      - task: DotNetCoreCLI@2
        displayName: 'Publish project'
        inputs:
          command: 'publish'
          projects: '${{ parameters.projectFile }}'
          arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(System.DefaultWorkingDirectory)/unzipped'
          publishWebProjects: false
          modifyOutputPath: false
          zipAfterPublish: false

      - task: ArchiveFiles@2
        displayName: "Archive files"
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/unzipped"
          includeRootFolder: false
          archiveFile: "$(Build.ArtifactStagingDirectory)/build$(Build.BuildId).zip"

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifacts (Zip File)'
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)/build$(Build.BuildId).zip
          artifactName: zipfile

      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifacts (Lib)'
        condition: eq('${{ parameters.hasTests }}', 'true')
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)/lib
          artifactName: lib

      - task: PublishBuildArtifacts@1
        condition: eq('${{ parameters.hasTests }}', 'true')
        displayName: 'Publish artifacts (Tests)'
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)/test
          artifactName: test