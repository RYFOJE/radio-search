// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Radio_Search.Importer.Canada.Data;

#nullable disable

namespace Radio_Search.Importer.Canada.Data.Migrations
{
    [DbContext(typeof(CanadaImporterContext))]
    [Migration("20250820225355_changedMaxLength")]
    partial class changedMaxLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Canada_Importer")
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.History.LicenseRecordHistory", b =>
                {
                    b.Property<int>("LicenseRecordHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseRecordHistoryId"));

                    b.Property<int>("CanadaLicenseRecordID")
                        .HasColumnType("int");

                    b.Property<int>("ChangeType")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditedByImportJobID")
                        .HasColumnType("int");

                    b.Property<int?>("EditedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("LicenseRecordHistoryId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("LicenseRecordHistoryId"), false);

                    b.HasIndex("CanadaLicenseRecordID");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("CanadaLicenseRecordID"));

                    b.HasIndex("EditedByImportJobID");

                    b.HasIndex("CanadaLicenseRecordID", "Version");

                    b.HasIndex("EditedByImportJobID", "ChangeType");

                    b.ToTable("LicenseRecordsHistory", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJob", b =>
                {
                    b.Property<int>("ImportJobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportJobID"));

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentStep")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ImportJobID");

                    b.HasIndex("Status");

                    b.ToTable("ImportJobs", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJobChunkFile", b =>
                {
                    b.Property<int>("ImportJobID")
                        .HasColumnType("int");

                    b.Property<int>("FileID")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ImportJobID", "FileID");

                    b.ToTable("ImportJobChunkFiles", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJobStats", b =>
                {
                    b.Property<int>("ImportJobID")
                        .HasColumnType("int");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeletedRecordCount")
                        .HasColumnType("int");

                    b.Property<int>("NewRecordCount")
                        .HasColumnType("int");

                    b.Property<int>("PreprocessingSkippedRows")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedRecordCount")
                        .HasColumnType("int");

                    b.HasKey("ImportJobID");

                    b.ToTable("ImportJobStats", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.AnalogDigital", b =>
                {
                    b.Property<string>("AnalogDigitalID")
                        .HasColumnType("nvarchar(1)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AnalogDigitalID");

                    b.ToTable("AnalogDigital", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.AntennaPattern", b =>
                {
                    b.Property<string>("AntennaPatternID")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AntennaPatternID");

                    b.ToTable("AntennaPatterns", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.AuthorizationStatus", b =>
                {
                    b.Property<string>("AuthorizationStatusID")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AuthorizationStatusID");

                    b.ToTable("AuthorizationStatuses", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.CommunicationType", b =>
                {
                    b.Property<string>("CommunicationTypeID")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CommunicationTypeID");

                    b.ToTable("CommunicationTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.ConformityFrequencyPlan", b =>
                {
                    b.Property<string>("ConformityFrequencyPlanID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ConformityFrequencyPlanID");

                    b.ToTable("ConformityFrequencyPlans", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.CongestionZoneType", b =>
                {
                    b.Property<string>("CongestionZoneTypeID")
                        .HasColumnType("nvarchar(1)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CongestionZoneTypeID");

                    b.ToTable("CongestionZoneTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.FiltrationInstalledType", b =>
                {
                    b.Property<string>("FiltrationInstalledTypeID")
                        .HasColumnType("nvarchar(1)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FiltrationInstalledTypeID");

                    b.ToTable("FiltrationInstalledTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.ITUClassType", b =>
                {
                    b.Property<string>("ITUClassTypeID")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ITUClassTypeID");

                    b.ToTable("ITUClassTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.LicenseRecord", b =>
                {
                    b.Property<int>("CanadaLicenseRecordID")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("AnalogCapacityChannels")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<string>("AnalogDigitalID")
                        .HasColumnType("nvarchar(1)");

                    b.Property<decimal?>("AntennaGainDbi")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<string>("AntennaManufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AntennaModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AntennaPatternID")
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal?>("AntennaStructureHeightM")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<string>("AuthorizationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationStatusID")
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("AzimuthMainLobeDeg")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<decimal?>("BeamwidthDeg")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<string>("CallSign")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Channel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationTypeID")
                        .HasColumnType("nvarchar(5)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ConformityFrequencyPlanID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CongestionZoneTypeID")
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DesignationOfEmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DigitalCapacityMbps")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<string>("FiltrationInstalledTypeID")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("FrequencyAllocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FrequencyMHz")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<decimal?>("FrontToBackRatioDb")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<int?>("GroundElevationM")
                        .HasColumnType("int");

                    b.Property<decimal?>("HeightAboveGroundM")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<decimal?>("HorizontalPowerW")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<string>("ITUClassTypeID")
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateOnly?>("InServiceDate")
                        .HasColumnType("date");

                    b.Property<string>("InternationalCoordinationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseTypeID")
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("LicenseeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("ModulationTypeID")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("NumberOfIdenticalStations")
                        .HasColumnType("int");

                    b.Property<decimal?>("OccupiedBandwidthKHz")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<string>("OperationalStatusID")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("PolarizationTypeID")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("ProvinceID")
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("RadiusOfOperationKm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("RegulatoryServiceID")
                        .HasColumnType("smallint");

                    b.Property<string>("RxThresholdSignalLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RxUnfadedReceivedSignalLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SatelliteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ServiceTypeID")
                        .HasColumnType("smallint");

                    b.Property<short?>("StandbyTransmitterInformationID")
                        .HasColumnType("smallint");

                    b.Property<string>("StationClassID")
                        .HasColumnType("nvarchar(5)");

                    b.Property<short?>("StationCostCategoryID")
                        .HasColumnType("smallint");

                    b.Property<string>("StationFunctionID")
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("StationLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StationReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("StationTypeID")
                        .HasColumnType("smallint");

                    b.Property<short?>("SubserviceTypeID")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("TotalLossesDb")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<decimal?>("TxERPdBW")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<decimal?>("TxPowerW")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("VerticalElevationAngleDeg")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.Property<decimal?>("VerticalPowerW")
                        .HasPrecision(24, 12)
                        .HasColumnType("decimal(24,12)");

                    b.HasKey("CanadaLicenseRecordID", "Version");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CanadaLicenseRecordID", "Version"));

                    b.HasIndex("AnalogDigitalID");

                    b.HasIndex("AntennaPatternID");

                    b.HasIndex("AuthorizationStatusID");

                    b.HasIndex("CommunicationTypeID");

                    b.HasIndex("ConformityFrequencyPlanID");

                    b.HasIndex("CongestionZoneTypeID");

                    b.HasIndex("FiltrationInstalledTypeID");

                    b.HasIndex("FrequencyMHz");

                    b.HasIndex("ITUClassTypeID");

                    b.HasIndex("IsValid");

                    b.HasIndex("LicenseTypeID");

                    b.HasIndex("ModulationTypeID");

                    b.HasIndex("OperationalStatusID");

                    b.HasIndex("PolarizationTypeID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("RegulatoryServiceID");

                    b.HasIndex("ServiceTypeID");

                    b.HasIndex("StandbyTransmitterInformationID");

                    b.HasIndex("StationClassID");

                    b.HasIndex("StationCostCategoryID");

                    b.HasIndex("StationFunctionID");

                    b.HasIndex("StationTypeID");

                    b.HasIndex("SubserviceTypeID");

                    b.HasIndex("IsValid", "CallSign");

                    b.HasIndex("IsValid", "CanadaLicenseRecordID");

                    b.HasIndex("IsValid", "FrequencyMHz");

                    b.ToTable("LicenseRecords", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.LicenseType", b =>
                {
                    b.Property<string>("LicenseTypeID")
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("LicenseTypeID");

                    b.ToTable("LicenseTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.ModulationType", b =>
                {
                    b.Property<string>("ModulationTypeID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ModulationTypeID");

                    b.ToTable("ModulationTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.OperationalStatus", b =>
                {
                    b.Property<string>("OperationalStatusID")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("OperationalStatusID");

                    b.ToTable("OperationStatuses", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.PolarizationType", b =>
                {
                    b.Property<string>("PolarizationTypeID")
                        .HasColumnType("nvarchar(1)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PolarizationTypeID");

                    b.ToTable("PolarizationTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.Province", b =>
                {
                    b.Property<string>("ProvinceID")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ProvinceID");

                    b.ToTable("Provinces", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.RegulatoryService", b =>
                {
                    b.Property<short>("RegulatoryServiceID")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RegulatoryServiceID");

                    b.ToTable("RegulatoryServices", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.ServiceType", b =>
                {
                    b.Property<short>("ServiceTypeID")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceTypeID");

                    b.ToTable("ServiceTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.StandbyTransmitterInformation", b =>
                {
                    b.Property<short>("StandbyTransmitterInformationID")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StandbyTransmitterInformationID");

                    b.ToTable("StandbyTransmitterInformation", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.StationClass", b =>
                {
                    b.Property<string>("StationClassID")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StationClassID");

                    b.ToTable("StationClasses", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.StationCostCategory", b =>
                {
                    b.Property<short>("StationCostCategoryID")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StationCostCategoryID");

                    b.ToTable("StationCostCategories", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.StationFunctionType", b =>
                {
                    b.Property<string>("StationFunctionTypeID")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StationFunctionTypeID");

                    b.ToTable("StationFunctionTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.StationType", b =>
                {
                    b.Property<short>("StationTypeID")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StationTypeID");

                    b.ToTable("StationTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.SubserviceType", b =>
                {
                    b.Property<short>("SubserviceTypeID")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SubserviceTypeID");

                    b.ToTable("SubserviceTypes", "Canada_Importer");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.History.LicenseRecordHistory", b =>
                {
                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJob", "EditedByImportJob")
                        .WithMany("AssociatedLicenseRecordHistories")
                        .HasForeignKey("EditedByImportJobID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.LicenseRecord", "LicenseRecord")
                        .WithMany("HistoryRecords")
                        .HasForeignKey("CanadaLicenseRecordID", "Version")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EditedByImportJob");

                    b.Navigation("LicenseRecord");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJobChunkFile", b =>
                {
                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJob", "ImportJob")
                        .WithMany("ImportJobChunkFiles")
                        .HasForeignKey("ImportJobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportJob");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJobStats", b =>
                {
                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJob", null)
                        .WithOne("Stats")
                        .HasForeignKey("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJobStats", "ImportJobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.LicenseRecord", b =>
                {
                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.AnalogDigital", "AnalogDigital")
                        .WithMany()
                        .HasForeignKey("AnalogDigitalID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.AntennaPattern", "AntennaPattern")
                        .WithMany()
                        .HasForeignKey("AntennaPatternID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.AuthorizationStatus", "AuthorizationStatus")
                        .WithMany()
                        .HasForeignKey("AuthorizationStatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.CommunicationType", "CommunicationType")
                        .WithMany()
                        .HasForeignKey("CommunicationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.ConformityFrequencyPlan", "ConformityToFrequencyPlan")
                        .WithMany()
                        .HasForeignKey("ConformityFrequencyPlanID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.CongestionZoneType", "CongestionZone")
                        .WithMany()
                        .HasForeignKey("CongestionZoneTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.FiltrationInstalledType", "FiltrationInstalledType")
                        .WithMany()
                        .HasForeignKey("FiltrationInstalledTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.ITUClassType", "ITUClassOfStation")
                        .WithMany()
                        .HasForeignKey("ITUClassTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.LicenseType", "LicenseType")
                        .WithMany()
                        .HasForeignKey("LicenseTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.ModulationType", "ModulationType")
                        .WithMany()
                        .HasForeignKey("ModulationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.OperationalStatus", "OperationalStatus")
                        .WithMany()
                        .HasForeignKey("OperationalStatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.PolarizationType", "Polarization")
                        .WithMany()
                        .HasForeignKey("PolarizationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.RegulatoryService", "RegulatoryService")
                        .WithMany()
                        .HasForeignKey("RegulatoryServiceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.ServiceType", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.StandbyTransmitterInformation", "StandbyTransmitterInfo")
                        .WithMany()
                        .HasForeignKey("StandbyTransmitterInformationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.StationClass", "StationClass")
                        .WithMany()
                        .HasForeignKey("StationClassID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.StationCostCategory", "StationCostCategory")
                        .WithMany()
                        .HasForeignKey("StationCostCategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.StationFunctionType", "StationFunction")
                        .WithMany()
                        .HasForeignKey("StationFunctionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.StationType", "StationType")
                        .WithMany()
                        .HasForeignKey("StationTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Radio_Search.Importer.Canada.Data.Models.License.SubserviceType", "Subservice")
                        .WithMany()
                        .HasForeignKey("SubserviceTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AnalogDigital");

                    b.Navigation("AntennaPattern");

                    b.Navigation("AuthorizationStatus");

                    b.Navigation("CommunicationType");

                    b.Navigation("ConformityToFrequencyPlan");

                    b.Navigation("CongestionZone");

                    b.Navigation("FiltrationInstalledType");

                    b.Navigation("ITUClassOfStation");

                    b.Navigation("LicenseType");

                    b.Navigation("ModulationType");

                    b.Navigation("OperationalStatus");

                    b.Navigation("Polarization");

                    b.Navigation("Province");

                    b.Navigation("RegulatoryService");

                    b.Navigation("Service");

                    b.Navigation("StandbyTransmitterInfo");

                    b.Navigation("StationClass");

                    b.Navigation("StationCostCategory");

                    b.Navigation("StationFunction");

                    b.Navigation("StationType");

                    b.Navigation("Subservice");
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.ImportInfo.ImportJob", b =>
                {
                    b.Navigation("AssociatedLicenseRecordHistories");

                    b.Navigation("ImportJobChunkFiles");

                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("Radio_Search.Importer.Canada.Data.Models.License.LicenseRecord", b =>
                {
                    b.Navigation("HistoryRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
